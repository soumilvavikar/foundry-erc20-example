// SPDX-License-Identifier: MIT

pragma solidity ^0.8.27;

import {DeploySV15Token} from "../script/DeploySV15Token.s.sol";
import {SV15Token} from "../src/SV15Token.sol";
import {Test, console} from "forge-std/Test.sol";

/**
 * @title This is a test contract to test the SV15Token.sol
 * @author Soumil Vavikar
 * @notice NA
 */
contract SV15TokenTest is Test {
    // Starting amount for Soumil
    uint256 SOUMIL_STARTING_AMOUNT = 100 ether;
    // 1 million tokens with 18 decimal places
    uint256 public constant INITIAL_SUPPLY = 100000 ether;

    SV15Token public sv15Token;
    DeploySV15Token public deployer;
    address public deployerAddress;

    address soumil;
    address siddhant;

    /**
     * Initial test setup
     */
    function setUp() public {
        deployer = new DeploySV15Token();

        sv15Token = new SV15Token(INITIAL_SUPPLY);
        // Here the token contract transfers initial supply of the tokens to the message sender
        sv15Token.transfer(msg.sender, INITIAL_SUPPLY);

        soumil = makeAddr("soumil");
        siddhant = makeAddr("siddhant");

        // Here the message sender sends the starting amount to Soumil
        vm.prank(msg.sender);
        sv15Token.transfer(soumil, SOUMIL_STARTING_AMOUNT);
    }

    /**
     * This function just tests the initial setup to confirm the sv15Token's total supply == initial supply
     */
    function testInitialSupply() public view {
        assertEq(sv15Token.totalSupply(), deployer.INITIAL_SUPPLY());
    }

    /**
     * This function tests the allowance method, where Soumil allows Siddhant to spend some tokens on his behalf.
     */
    function testAllowances() public {
        uint256 initialAllowance = 1000;

        // Soumil approves Siddhant to spend tokens on his behalf

        vm.prank(soumil);
        sv15Token.approve(siddhant, initialAllowance);
        uint256 transferAmount = 500;

        vm.prank(siddhant);
        sv15Token.transferFrom(soumil, siddhant, transferAmount);

        assertEq(sv15Token.balanceOf(siddhant), transferAmount);
        assertEq(
            sv15Token.balanceOf(soumil),
            SOUMIL_STARTING_AMOUNT - transferAmount
        );
    }

    // NOTE - Tests below this note are AI generated

    /**
     * This will test the transfer function.
     */
    function testTransfer() public {
        uint256 transferAmount = 50 ether;

        vm.prank(soumil);
        bool success = sv15Token.transfer(siddhant, transferAmount);

        assertTrue(success);
        assertEq(sv15Token.balanceOf(siddhant), transferAmount);
        assertEq(
            sv15Token.balanceOf(soumil),
            SOUMIL_STARTING_AMOUNT - transferAmount
        );
    }

    /**
     * This test will check the failed transfer due insufficient funds
     */
    function testFailTransferInsufficientBalance() public {
        uint256 transferAmount = SOUMIL_STARTING_AMOUNT + 1 ether;

        vm.prank(soumil);
        sv15Token.transfer(siddhant, transferAmount);
    }

    /**
     * This test will approve the allowance.
     */
    function testApprove() public {
        uint256 approvalAmount = 1000;

        vm.prank(soumil);
        bool success = sv15Token.approve(siddhant, approvalAmount);

        assertTrue(success);
        assertEq(sv15Token.allowance(soumil, siddhant), approvalAmount);
    }

    /**
     * Tests the negative test case for allowance. Failure due to insufficient allowance
     */
    function testFailTransferFromInsufficientAllowance() public {
        uint256 initialAllowance = 500;
        uint256 transferAmount = 1000;

        vm.prank(soumil);
        sv15Token.approve(siddhant, initialAllowance);

        vm.prank(siddhant);
        sv15Token.transferFrom(soumil, siddhant, transferAmount);
    }

    /**
     * This function will burn token from Soumil's address.
     *  - This was incorrect test generated by AI, we updated to it to do the expected thing.
     */
    function testBurnTokens() public {
        uint256 burnAmount = 1 ether;
        uint256 initialSupply = sv15Token.totalSupply();

        console.log("Initial Supply: %s", initialSupply);
        console.log(
            "BalanceOf Soumil's tokens: %s",
            sv15Token.balanceOf(soumil)
        );

        vm.prank(soumil);
        sv15Token.burnToken(address(soumil), burnAmount);

        console.log("Initial Supply: %s", initialSupply);
        console.log(
            "BalanceOf Soumil's tokens: %s",
            sv15Token.balanceOf(soumil)
        );

        assertEq(sv15Token.totalSupply(), initialSupply - burnAmount);
        assertEq(
            sv15Token.balanceOf(soumil),
            SOUMIL_STARTING_AMOUNT - burnAmount
        );
    }

    /**
     * This function tests the total supply of the token
     */
    function testTotalSupply() public view {
        assertEq(sv15Token.totalSupply(), INITIAL_SUPPLY);
    }

    /**
     * This function tests the token's metadata
     */
    function testTokenMetadata() public view {
        assertEq(sv15Token.name(), "SV15Token");
        assertEq(sv15Token.symbol(), "SV15T");
        assertEq(sv15Token.decimals(), 18);
    }
}
